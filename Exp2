from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
file_path = '/content/drive/My Drive/MachineLearning/Housing.csv'  # adjust this path
df = pd.read_csv(file_path)
df.head()

#explore data
print("Info")
df.info()
print()
print("Despription")
print(df.describe())
print()
print("Mising values")
print(df.isnull().sum())

print(df.dtypes)

# Identify categorical columns
categorical_cols = df.select_dtypes(include='object').columns
print("Categorical columns:", categorical_cols)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)


y_pred = model.predict(X_test)


# Mean Squared Error
mse = mean_squared_error(y_test, y_pred)

# Root Mean Squared Error
rmse = np.sqrt(mse)

# R² Score
r2 = r2_score(y_test, y_pred)

print("MSE:", mse)
print("RMSE:", rmse)
print("R² Score:", r2)


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataframe (assuming the path is correct from previous cells)
file_path = '/content/drive/My Drive/MachineLearning/Housing.csv'  # adjust this path
df = pd.read_csv(file_path)

# For single feature regression (visualization)
feature = 'area' # Changed feature to 'area' since 'median_income' and 'median_house_value' are not in the dataset
X_single = df[[feature]]
y_single = df['price'] # Changed target to 'price'

# Train-test split
from sklearn.model_selection import train_test_split
X_train_s, X_test_s, y_train_s, y_test_s = train_test_split(X_single, y_single, test_size=0.2, random_state=42)

# Model
from sklearn.linear_model import LinearRegression
model_s = LinearRegression()
model_s.fit(X_train_s, y_train_s)
y_pred_s = model_s.predict(X_test_s)

# Plot
plt.figure(figsize=(8,5))
plt.scatter(X_test_s, y_test_s, color='blue', label='Actual')
plt.plot(X_test_s, y_pred_s, color='red', linewidth=2, label='Regression Line')
plt.xlabel(feature)
plt.ylabel('Price')
plt.title(f'Regression Line: {feature} vs. Price')
plt.legend()
plt.grid(True)
plt.show()
